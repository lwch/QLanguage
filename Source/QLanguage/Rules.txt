0 : begin -> start
1 : member_desc -> member_desc "." "{Letter}"
2 : member_desc -> "{Letter}"
3 : type_desc -> "unsigned" "char"
4 : type_desc -> "char"
5 : type_desc -> "unsigned" "short"
6 : type_desc -> "short"
7 : type_desc -> "unsigned" "int"
8 : type_desc -> "int"
9 : type_desc -> "unsigned" "long"
10 : type_desc -> "long"
11 : type_desc -> "float"
12 : type_desc -> "double"
13 : type_desc -> "string"
14 : type_desc -> "auto"
15 : type_desc -> "{Letter}"
16 : value_desc -> "true"
17 : value_desc -> "false"
18 : value_desc -> "{Real}"
19 : value_desc -> "{Digit}"
20 : value_desc -> member_desc
21 : value_desc -> "{String}"
22 : value_desc -> values
23 : values -> "{" values_list "}"
24 : values_list -> values_list "," value_desc
25 : values_list -> value_desc
26 : value_list -> value_list "," exp
27 : value_list -> exp
28 : attribute -> "public"
29 : attribute -> "private"
30 : attribute -> "protected"
31 : array_lst -> array_lst "[" exp "]"
32 : array_lst -> array_lst "[" "]"
33 : array_lst -> "[" exp "]"
34 : array_lst -> "[" "]"
35 : start -> item_list
36 : paramter_list -> paramter_list "," paramter
37 : paramter_list -> paramter
38 : paramter -> type_desc "{Letter}" array_lst
39 : paramter -> type_desc "{Letter}"
40 : paramter -> type_desc
41 : item_list -> item_list item
42 : item_list -> item
43 : item -> global_function_desc
44 : item -> declare_desc ";"
45 : item -> interface_desc
46 : item -> class_desc
47 : stmt_list -> stmt_list stmt
48 : stmt_list -> stmt
49 : stmt_list -> stmt_list block
50 : stmt_list -> block
51 : block -> "{" stmt_list "}"
52 : block -> "{" "}"
53 : template_desc -> "template" "<" template_list ">"
54 : template_desc -> "template" "<" ">"
55 : template_list -> template_list "," template_item
56 : template_list -> template_item
57 : template_item -> "typename" "{Letter}"
58 : template_item -> type_desc "{Letter}"
59 : global_function_desc -> template_desc type_desc "{Letter}" "(" paramter_list ")" block
60 : global_function_desc -> type_desc "{Letter}" "(" paramter_list ")" block
61 : global_function_desc -> template_desc type_desc "{Letter}" "(" ")" block
62 : global_function_desc -> type_desc "{Letter}" "(" ")" block
63 : global_function_desc -> template_desc "void" "{Letter}" "(" paramter_list ")" block
64 : global_function_desc -> "void" "{Letter}" "(" paramter_list ")" block
65 : global_function_desc -> template_desc "void" "{Letter}" "(" ")" block
66 : global_function_desc -> "void" "{Letter}" "(" ")" block
67 : function_declare -> template_desc type_desc "{Letter}" "(" paramter_list ")" ";"
68 : function_declare -> type_desc "{Letter}" "(" paramter_list ")" ";"
69 : function_declare -> template_desc type_desc "{Letter}" "(" ")" ";"
70 : function_declare -> type_desc "{Letter}" "(" ")" ";"
71 : function_declare -> template_desc "void" "{Letter}" "(" paramter_list ")" ";"
72 : function_declare -> "void" "{Letter}" "(" paramter_list ")" ";"
73 : function_declare -> template_desc "void" "{Letter}" "(" ")" ";"
74 : function_declare -> "void" "{Letter}" "(" ")" ";"
75 : interface_desc -> "interface" "{Letter}" "{" interface_content "}"
76 : interface_desc -> "interface" "{Letter}" "{" "}"
77 : interface_content -> interface_content function_declare
78 : interface_content -> function_declare
79 : class_desc -> template_desc class_desc1 class_desc2 "{" class_content_list "}"
80 : class_desc -> class_desc1 class_desc2 "{" class_content_list "}"
81 : class_desc -> template_desc class_desc1 "{" class_content_list "}"
82 : class_desc -> class_desc1 "{" class_content_list "}"
83 : class_desc -> template_desc class_desc1 class_desc2 "{" "}"
84 : class_desc -> class_desc1 class_desc2 "{" "}"
85 : class_desc -> template_desc class_desc1 "{" "}"
86 : class_desc -> class_desc1 "{" "}"
87 : class_desc1 -> "class" "{Letter}"
88 : class_desc1 -> "class"
89 : class_desc2 -> attribute "implement" "{Letter}"
90 : class_desc2 -> attribute "extend" "{Letter}"
91 : class_content_list -> class_content_list class_content
92 : class_content_list -> class_content
93 : class_content -> function_desc
94 : class_content -> attribute declare_desc ";"
95 : class_content -> declare_desc ";"
96 : function_desc -> template_desc attribute type_desc "{Letter}" "(" paramter_list ")" block
97 : function_desc -> attribute type_desc "{Letter}" "(" paramter_list ")" block
98 : function_desc -> template_desc type_desc "{Letter}" "(" paramter_list ")" block
99 : function_desc -> type_desc "{Letter}" "(" paramter_list ")" block
100 : function_desc -> template_desc attribute type_desc "{Letter}" "(" ")" block
101 : function_desc -> attribute type_desc "{Letter}" "(" ")" block
102 : function_desc -> template_desc type_desc "{Letter}" "(" ")" block
103 : function_desc -> type_desc "{Letter}" "(" ")" block
104 : function_desc -> template_desc attribute "void" "{Letter}" "(" paramter_list ")" block
105 : function_desc -> attribute "void" "{Letter}" "(" paramter_list ")" block
106 : function_desc -> template_desc "void" "{Letter}" "(" paramter_list ")" block
107 : function_desc -> "void" "{Letter}" "(" paramter_list ")" block
108 : function_desc -> template_desc attribute "void" "{Letter}" "(" ")" block
109 : function_desc -> attribute "void" "{Letter}" "(" ")" block
110 : function_desc -> template_desc "void" "{Letter}" "(" ")" block
111 : function_desc -> "void" "{Letter}" "(" ")" block
112 : stmt -> assign_desc ";"
113 : stmt -> call_list ";"
114 : stmt -> declare_desc ";"
115 : stmt -> if_desc
116 : stmt -> for_desc
117 : stmt -> while_desc
118 : stmt -> do_desc ";"
119 : stmt -> switch_desc
120 : stmt -> break_desc ";"
121 : stmt -> continue_desc ";"
122 : stmt -> return_desc
123 : stmt_no_semicolon -> assign_desc
124 : stmt_no_semicolon -> call_list
125 : stmt_no_semicolon -> declare_desc
126 : stmt_no_semicolon -> if_desc
127 : stmt_no_semicolon -> for_desc
128 : stmt_no_semicolon -> while_desc
129 : stmt_no_semicolon -> do_desc
130 : stmt_no_semicolon -> switch_desc
131 : declare_desc -> declare_desc "," "{Letter}" array_lst "=" exp
132 : declare_desc -> declare_desc "," "{Letter}" "=" exp
133 : declare_desc -> declare_desc "," "{Letter}" array_lst
134 : declare_desc -> declare_desc "," "{Letter}"
135 : declare_desc -> type_desc "{Letter}" array_lst "=" exp
136 : declare_desc -> type_desc "{Letter}" "=" exp
137 : declare_desc -> type_desc "{Letter}" array_lst
138 : declare_desc -> type_desc "{Letter}"
139 : assign_desc -> member_desc "+" "=" exp
140 : assign_desc -> member_desc "-" "=" exp
141 : assign_desc -> member_desc "&" "=" exp
142 : assign_desc -> member_desc "|" "=" exp
143 : assign_desc -> member_desc "^" "=" exp
144 : assign_desc -> member_desc "<" "<" "=" exp
145 : assign_desc -> member_desc ">" ">" "=" exp
146 : assign_desc -> member_desc "=" exp
147 : call_list -> call_list "(" value_list ")"
148 : call_list -> call_list "(" ")"
149 : call_list -> call_desc
150 : call_desc -> member_desc "(" value_list ")"
151 : call_desc -> member_desc "(" ")"
152 : if_desc -> "if" "(" exp ")" stmt else_desc
153 : if_desc -> "if" "(" exp ")" stmt
154 : if_desc -> "if" "(" exp ")" block else_desc
155 : if_desc -> "if" "(" exp ")" block
156 : else_desc -> "else" stmt
157 : else_desc -> "else" block
158 : for_desc -> "for" "(" stmt_no_semicolon ";" exp ";" stmt_no_semicolon ")" block
159 : while_desc -> "while" "(" exp ")" block
160 : do_desc -> "do" block "while" "(" exp ")"
161 : switch_desc -> "switch" "(" exp ")" "{" switch_content_list "}"
162 : switch_content_list -> switch_content_list switch_content
163 : switch_content_list -> switch_content
164 : switch_content -> "case" exp ":" stmt_list
165 : switch_content -> "default" ":" stmt_list
166 : break_desc -> "break"
167 : continue_desc -> "continue"
168 : return_desc -> "return" block
169 : return_desc -> "return" exp ";"
170 : exp -> exp ">" "=" exp1
171 : exp -> exp "<" "=" exp1
172 : exp -> exp "=" "=" exp1
173 : exp -> exp ">" exp1
174 : exp -> exp "<" exp1
175 : exp -> exp "=" exp1
176 : exp -> exp "&" "&" exp1
177 : exp -> exp "|" "|" exp1
178 : exp -> exp "&" exp1
179 : exp -> exp "|" exp1
180 : exp -> exp "^" exp1
181 : exp -> exp "?" exp ":" exp
182 : exp -> exp1
183 : exp1 -> "!" exp2
184 : exp1 -> "+" exp2
185 : exp1 -> "-" exp2
186 : exp1 -> exp2
187 : exp2 -> exp2 "+" exp3
188 : exp2 -> exp2 "-" exp3
189 : exp2 -> exp3
190 : exp3 -> exp3 "*" exp4
191 : exp3 -> exp3 "/" exp4
192 : exp3 -> exp3 "%" exp4
193 : exp3 -> exp4
194 : exp4 -> "(" exp ")"
195 : exp4 -> call_list
196 : exp4 -> value_desc "as" type_desc
197 : exp4 -> value_desc
