%token "void" "char" "short" "int" "long" "float" "double" "auto" "as";
%token "true" "false";
%token "unsigned";
%token "string";
%token "interface" "class";
%token "public" "private" "protected";
%token "implement" "extend";
%token "return";
%token "template" "typename";
%token "(" ")" "{" "}" "[" "]" "<" ">" "," ";" "." "?" ":";
%token "if" "else";
%token "for";
%token "while";
%token "do";
%token "switch" "case" "default";
%token "break" "continue";
%token ">" "<" "=" "!" "&" "|" "^";
%token "+" "-" "*" "/" "%";

%start start;

member_desc -> member_desc "." "{Letter}"
            |  "{Letter}"
            ;

type_desc -> ["unsigned"] "char"
          |  ["unsigned"] "short"
          |  ["unsigned"] "int"
          |  ["unsigned"] "long"
          |  "float"
          |  "double"
          |  "string"
          |  "auto"
          |  "{Letter}"
          ;

value_desc -> "true"
           |  "false"
           |  "{Real}"
           |  "{Digit}"
           |  member_desc
           |  "{String}"
           |  values
           ;

values -> "{" values_list "}"
       ;

values_list -> values_list "," value_desc
            |  value_desc
            ;

value_list -> value_list "," exp
           |  exp
           ;

attribute -> "public"
          |  "private"
          |  "protected"
          ;

array_lst -> array_lst "[" [exp] "]"
          |  "[" [exp] "]"
          ;

start -> item_list
      ;

paramter_list -> paramter_list "," paramter
              |  paramter
              ;

paramter -> type_desc "{Letter}" [array_lst]
         |  type_desc
         ;

item_list -> [item_list] item
          ;

item -> global_function_desc
     |  declare_desc ";"
     |  interface_desc
     |  class_desc
     ;

stmt_list -> [stmt_list] stmt
          |  [stmt_list] block
          ;

block -> "{" [stmt_list] "}"
      ;

template_desc -> "template" "<" [template_list] ">"
              ;

template_list -> template_list "," template_item
              |  template_item
              ;

template_item -> "typename" "{Letter}"
              |  type_desc "{Letter}"
              ;

global_function_desc -> [template_desc] type_desc "{Letter}" "(" [paramter_list] ")" block
                     |  [template_desc] "void" "{Letter}" "(" [paramter_list] ")" block
                     ;

function_declare -> [template_desc] type_desc "{Letter}" "(" [paramter_list] ")" ";"
                 |  [template_desc] "void" "{Letter}" "(" [paramter_list] ")" ";"
                 ;

interface_desc -> "interface" "{Letter}" "{" [interface_content] "}"
               ;

interface_content -> [interface_content] function_declare
                  ;

class_desc -> [template_desc] class_desc1 [class_desc2] "{" [class_content_list] "}"
           ;

class_desc1 -> "class" ["{Letter}"]
            ;

class_desc2 -> attribute "implement" "{Letter}"
            |  attribute "extend" "{Letter}"
            ;

class_content_list -> [class_content_list] class_content
                   ;

class_content -> function_desc
              |  [attribute] declare_desc ";"
              ;

function_desc -> [template_desc] [attribute] type_desc "{Letter}" "(" [paramter_list] ")" block
              |  [template_desc] [attribute] "void" "{Letter}" "(" [paramter_list] ")" block
              ;

stmt -> assign_desc ";"
     |  call_list ";"
     |  declare_desc ";"
     |  if_desc
     |  for_desc
     |  while_desc
     |  do_desc ";"
     |  switch_desc
     |  break_desc ";"
     |  continue_desc ";"
     |  return_desc
     ;

stmt_no_semicolon -> assign_desc
                  |  call_list
                  |  declare_desc
                  |  if_desc
                  |  for_desc
                  |  while_desc
                  |  do_desc
                  |  switch_desc
                  ;

declare_desc -> declare_desc "," "{Letter}" [array_lst] ["=" exp]
             |  type_desc "{Letter}" [array_lst] ["=" exp]
             ;

assign_desc -> member_desc "+" "=" exp
            |  member_desc "-" "=" exp
            |  member_desc "&" "=" exp
            |  member_desc "|" "=" exp
            |  member_desc "^" "=" exp
            |  member_desc "<" "<" "=" exp
            |  member_desc ">" ">" "=" exp
            |  member_desc "=" exp
            ;

call_list -> call_list "(" [value_list] ")"
          |  call_desc
          ;

call_desc -> member_desc "(" [value_list] ")"
          ;

if_desc -> "if" "(" exp ")" stmt [else_desc]
        |  "if" "(" exp ")" block [else_desc]
        ;

else_desc -> "else" stmt
          |  "else" block
          ;

for_desc -> "for" "(" stmt_no_semicolon ";" exp ";" stmt_no_semicolon ")" block
         ;

while_desc -> "while" "(" exp ")" block
           ;

do_desc -> "do" block "while" "(" exp ")"
        ;

switch_desc -> "switch" "(" exp ")" "{" switch_content_list "}"
            ;

switch_content_list -> switch_content_list switch_content
                    |  switch_content
                    ;

switch_content -> "case" exp ":" stmt_list
               |  "default" ":" stmt_list
               ;

break_desc -> "break"
           ;

continue_desc -> "continue"
              ;

return_desc -> "return" block
            |  "return" exp ";"
            ;

exp -> exp ">" "=" exp1
    |  exp "<" "=" exp1
    |  exp "=" "=" exp1
    |  exp ">" exp1
    |  exp "<" exp1
    |  exp "=" exp1
    |  exp "&" "&" exp1
    |  exp "|" "|" exp1
    |  exp "&" exp1
    |  exp "|" exp1
    |  exp "^" exp1
    |  exp "?" exp ":" exp
    |  exp1
    ;

exp1 -> "!" exp2
     |  "+" exp2
     |  "-" exp2
     |  exp2
     ;

exp2 -> exp2 "+" exp3
     |  exp2 "-" exp3
     |  exp3
     ;

exp3 -> exp3 "*" exp4
     |  exp3 "/" exp4
     |  exp3 "%" exp4
     |  exp4
     ;

exp4 -> "(" exp ")"
     |  call_list
     |  value_desc ["as" type_desc]
     ;
